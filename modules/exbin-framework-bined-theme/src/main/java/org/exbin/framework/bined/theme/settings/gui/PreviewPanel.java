/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.theme.settings.gui;

import java.awt.BorderLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.auxiliary.binary_data.array.ByteArrayEditableData;
import org.exbin.bined.EditMode;
import org.exbin.bined.RowWrappingMode;
import org.exbin.bined.SelectionRange;
import org.exbin.bined.highlight.swing.NonprintablesCodeAreaAssessor;
import org.exbin.bined.highlight.swing.SearchCodeAreaColorAssessor;
import org.exbin.bined.highlight.swing.SearchMatch;
import org.exbin.bined.swing.capability.CharAssessorPainterCapable;
import org.exbin.bined.swing.capability.ColorAssessorPainterCapable;
import org.exbin.bined.swing.section.SectCodeArea;
import org.exbin.framework.App;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.WindowUtils;

/**
 * Preview panel for code area.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class PreviewPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(PreviewPanel.class);

    private SectCodeArea codeArea;
    private final PreviewType previewType;

    public PreviewPanel() {
        this(PreviewType.DEFAULT);
    }

    public PreviewPanel(PreviewType previewType) {
        this.previewType = previewType;
        initComponents();
        init();
    }

    @Nonnull
    public SectCodeArea getCodeArea() {
        return codeArea;
    }

    private void init() {
        codeArea = new SectCodeArea();
        initPreviewCodeArea();
        this.add(codeArea, BorderLayout.CENTER);
    }

    private void initPreviewCodeArea() {
        codeArea.setEditMode(EditMode.READ_ONLY);
        if (previewType == PreviewType.WITH_SEARCH) {
            ColorAssessorPainterCapable painter = (ColorAssessorPainterCapable) codeArea.getPainter();
            SearchCodeAreaColorAssessor matchColorAssessor = new SearchCodeAreaColorAssessor(painter.getColorAssessor());
            NonprintablesCodeAreaAssessor nonprintableColorAssessor = new NonprintablesCodeAreaAssessor(matchColorAssessor, ((CharAssessorPainterCapable) painter).getCharAssessor());
            painter.setColorAssessor(nonprintableColorAssessor);
            ((CharAssessorPainterCapable) painter).setCharAssessor(nonprintableColorAssessor);
            List<SearchMatch> exampleMatches = new ArrayList<>();
            // Set manual search matches for "ligula"
            exampleMatches.add(new SearchMatch(145, 6));
            exampleMatches.add(new SearchMatch(480, 6));
            exampleMatches.add(new SearchMatch(1983, 6));
            matchColorAssessor.setMatches(exampleMatches);
            matchColorAssessor.setCurrentMatchIndex(1);
        }
        ByteArrayEditableData exampleData = new ByteArrayEditableData();
        try {
            exampleData.loadFromStream(getClass().getResourceAsStream("/org/exbin/framework/bined/theme/resources/preview/lorem.txt"));
        } catch (IOException ex) {
            Logger.getLogger(PreviewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        codeArea.setContentData(exampleData);
        codeArea.setRowWrapping(RowWrappingMode.WRAPPING);
        codeArea.setEnabled(false);
        codeArea.setSelection(new SelectionRange(200, 300));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previewLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        previewLabel.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow"));
        previewLabel.setText(resourceBundle.getString("previewLabel.text")); // NOI18N
        previewLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        previewLabel.setOpaque(true);
        add(previewLabel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new PreviewPanel());
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel previewLabel;
    // End of variables declaration//GEN-END:variables

    public enum PreviewType {
        DEFAULT,
        WITH_SEARCH
    }
}
