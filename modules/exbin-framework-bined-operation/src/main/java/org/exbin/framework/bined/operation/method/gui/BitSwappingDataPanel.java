/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.method.gui;

import java.util.Optional;
import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultListModel;
import org.exbin.framework.App;
import org.exbin.framework.bined.operation.method.BitSwappingDataMethod;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.WindowUtils;

/**
 * Fill simple data component panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class BitSwappingDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(BitSwappingDataPanel.class);

    private ResultChangeListener resultChangeListener = null;

    public BitSwappingDataPanel() {
        initComponents();
        init();
    }

    private void init() {
        DefaultListModel<String> operationTypesModel = new DefaultListModel<>();
        for (BitSwappingDataMethod.OperationType operationType : BitSwappingDataMethod.OperationType.values()) {
            operationTypesModel.addElement(resourceBundle.getString("operationType." + operationType.name().toLowerCase()));
        }
        operationTypeList.setModel(operationTypesModel);
    }

    @Nonnull
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        typePanel = new javax.swing.JPanel();
        operationTypeLabel = new javax.swing.JLabel();
        operationTypeScrollPane = new javax.swing.JScrollPane();
        operationTypeList = new javax.swing.JList<>();
        parametersPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        operationTypeLabel.setText(resourceBundle.getString("operationTypeLabel.text")); // NOI18N

        operationTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        operationTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                operationTypeListValueChanged(evt);
            }
        });
        operationTypeScrollPane.setViewportView(operationTypeList);

        javax.swing.GroupLayout typePanelLayout = new javax.swing.GroupLayout(typePanel);
        typePanel.setLayout(typePanelLayout);
        typePanelLayout.setHorizontalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationTypeScrollPane)
                    .addGroup(typePanelLayout.createSequentialGroup()
                        .addComponent(operationTypeLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        typePanelLayout.setVerticalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operationTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationTypeScrollPane)
                .addContainerGap())
        );

        splitPane.setLeftComponent(typePanel);

        javax.swing.GroupLayout parametersPanelLayout = new javax.swing.GroupLayout(parametersPanel);
        parametersPanel.setLayout(parametersPanelLayout);
        parametersPanelLayout.setHorizontalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 881, Short.MAX_VALUE)
        );
        parametersPanelLayout.setVerticalGroup(
            parametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(parametersPanel);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void operationTypeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_operationTypeListValueChanged
        resultChanged();
    }//GEN-LAST:event_operationTypeListValueChanged

    private void resultChanged() {
        if (resultChangeListener != null) {
            resultChangeListener.resultChanged();
        }
    }

    @Nonnull
    public Optional<BitSwappingDataMethod.OperationType> getOperationType() {
        int selectedIndex = operationTypeList.getSelectedIndex();
        return selectedIndex >= 0 ? Optional.of(BitSwappingDataMethod.OperationType.values()[selectedIndex]) : Optional.empty();
    }

    public void setOperationType(BitSwappingDataMethod.OperationType operationType) {
        operationTypeList.setSelectedIndex(operationType.ordinal());
    }

    public void setResultChangeListener(ResultChangeListener resultChangeListener) {
        this.resultChangeListener = resultChangeListener;
    }

    public void initFocus() {
        operationTypeList.requestFocus();
    }

    public void acceptInput() {
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new BitSwappingDataPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel operationTypeLabel;
    private javax.swing.JList<String> operationTypeList;
    private javax.swing.JScrollPane operationTypeScrollPane;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JPanel typePanel;
    // End of variables declaration//GEN-END:variables

    public interface ResultChangeListener {

        void resultChanged();
    }
}
