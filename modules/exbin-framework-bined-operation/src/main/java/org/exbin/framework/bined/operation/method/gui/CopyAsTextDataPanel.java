/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.bined.operation.method.gui;

import java.util.List;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.bined.CodeCharactersCase;
import org.exbin.bined.CodeType;
import org.exbin.framework.App;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.WindowUtils;

/**
 * Copy data as text code panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CopyAsTextDataPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle;

    private ResultChangeListener resultChangeListener = null;

    public CopyAsTextDataPanel() {
        this(App.getModule(LanguageModuleApi.class).getBundle(CopyAsTextDataPanel.class));
        initComponents();
        init();
    }

    public CopyAsTextDataPanel(java.util.ResourceBundle resourceBundle) {
        this.resourceBundle = resourceBundle;
        initComponents();
        init();
    }

    private void init() {
    }

    public void setCodeTypes(List<String> codeTypes) {
        for (String codeType : codeTypes) {
            codeTypeComboBox.addItem(codeType);
        }
    }
    
    public void setCharactersCases(List<String> charactersCases) {
        for (String charactersCase : charactersCases) {
            codeCharactersComboBox.addItem(charactersCase);
        }
    }

    @Nonnull
    public CodeType getCodeType() {
        return CodeType.values()[codeTypeComboBox.getSelectedIndex()];
    }

    public void setCodeType(CodeType codeType) {
        codeTypeComboBox.setSelectedIndex(codeType.ordinal());
    }

    @Nonnull    
    public CodeCharactersCase getCodeCharactersCase() {
        return CodeCharactersCase.values()[codeCharactersComboBox.getSelectedIndex()];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codeTypeLabel = new javax.swing.JLabel();
        codeTypeComboBox = new javax.swing.JComboBox<>();
        hexCharactersLabel = new javax.swing.JLabel();
        codeCharactersComboBox = new javax.swing.JComboBox<>();

        codeTypeLabel.setText(resourceBundle.getString("codeTypeScrollModeLabel.text")); // NOI18N

        codeTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                codeTypeComboBoxItemStateChanged(evt);
            }
        });

        hexCharactersLabel.setText(resourceBundle.getString("hexCharactersModeLabel.text")); // NOI18N

        codeCharactersComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                codeCharactersComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(codeCharactersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codeTypeLabel)
                            .addComponent(hexCharactersLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codeTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexCharactersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codeCharactersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void codeTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_codeTypeComboBoxItemStateChanged
        resultChanged();
    }//GEN-LAST:event_codeTypeComboBoxItemStateChanged

    private void codeCharactersComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_codeCharactersComboBoxItemStateChanged
        resultChanged();
    }//GEN-LAST:event_codeCharactersComboBoxItemStateChanged

    public void setResultChangeListener(ResultChangeListener resultChangeListener) {
        this.resultChangeListener = resultChangeListener;
    }

    private void resultChanged() {
        if (resultChangeListener != null) {
            resultChangeListener.resultChanged();
        }
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new CopyAsTextDataPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> codeCharactersComboBox;
    private javax.swing.JComboBox<String> codeTypeComboBox;
    private javax.swing.JLabel codeTypeLabel;
    private javax.swing.JLabel hexCharactersLabel;
    // End of variables declaration//GEN-END:variables

    public void initFocus() {
    }

    public interface ResultChangeListener {

        void resultChanged();
    }
}
